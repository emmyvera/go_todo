// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: todo.sql

package db

import (
	"context"
	"time"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
  title, 
  note,
  due_date
) VALUES (
  $1, $2, $3
)
RETURNING id, title, note, due_date, created_at
`

type CreateTodoParams struct {
	Title   string    `json:"title"`
	Note    string    `json:"note"`
	DueDate time.Time `json:"due_date"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.Title, arg.Note, arg.DueDate)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Note,
		&i.DueDate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, title, note, due_date, created_at FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Note,
		&i.DueDate,
		&i.CreatedAt,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, title, note, due_date, created_at FROM todos
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTodosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Note,
			&i.DueDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
  set title = $2,
  note = $3, 
  due_date = $4  
WHERE id = $1
RETURNING id, title, note, due_date, created_at
`

type UpdateTodoParams struct {
	ID      string    `json:"id"`
	Title   string    `json:"title"`
	Note    string    `json:"note"`
	DueDate time.Time `json:"due_date"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo,
		arg.ID,
		arg.Title,
		arg.Note,
		arg.DueDate,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Note,
		&i.DueDate,
		&i.CreatedAt,
	)
	return i, err
}
